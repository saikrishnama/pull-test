AWSTemplateFormatVersion: '2010-09-09'
Description: ECS-Task Defination
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: ECS Task Defaination and Container   Details 
      Parameters:
        - TaskDefinitionName  
        - EcrRepoName
        - ImageTag
        - ContainerCPU
        - ContainerMemory
        - ContainerPort  
    - Label:
        default: Container Logging   Details
      Parameters:
        - logging
        - RetentionInDays
    - Label:
        default: Common Environment Details 
      Parameters:
        - EnvironmentName
        - ApplicationName
Parameters:
  TaskDefinitionName:
    Default: ""
    Type: String
    Description: Name of the ECS TaskDefinationName
  EcrRepoName:
    Type: String
    Default: ""
    Description: Name of the ECR Repo

  ImageTag:
    Type: String
    Default: ""
    Description: ECS Repo Image Tag version

  ContainerCPU:
    Type: Number
    Default: 1024
    Description: Container CPU Limit Value
  ContainerMemory:
    Description: Container Memory Limit Value
    Type: Number
    Default: 256

  ContainerPort:
    Description: ECS Container Port Info
    Type: Number
    Default: 80

  logging:
    Description: Select any of the logging options
    Type: String
    Default: 'Cloudwatch-No'
    AllowedValues:
      - Cloudwatch-No
      - Cloudwatch

  RetentionInDays:
    Description: Number of days would like to keep the Container logs in Cloudwatch
    Type: Number
    Default: 14
    AllowedValues:
      - 30
      - 40
      - 14
  ApplicationName:
    Description: Name of the Application Name
    Type: String
    Default: "mcs-poc-td"
  EnvironmentName:
    Description: Type of Env
    Type: String
    Default: development
    AllowedValues:
      - development
      - staging
      - production
  # CreateAPISVC:
  #   Type: String
  #   Default: no
  #   AllowedValues:
  #     - yes
  #     - no
  # ClusterName:
  #   Type: String
  #   Default: "mcs-poc"
  #   Description: "Cluster Name requred only When would like to create a service"
Mappings:
  Envmap:
    development:
      type: dev
    staging:
      type: stage
    production:
      type: prod
Conditions:
  cloudwatch: !Equals [ !Ref logging, "Cloudwatch" ]

Resources:
  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Condition: cloudwatch
    Properties:
      LogGroupName: !Join ['-', [ecsloggroup, !Ref 'AWS::StackName']]
      RetentionInDays: !Ref RetentionInDays

  taskdefinition:
    DependsOn: TaskExecutionRole
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref  TaskDefinitionName
      TaskRoleArn: !GetAtt TaskExecutionRole.Arn 
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn 
      ContainerDefinitions:
        - Name: !Ref ApplicationName
          Cpu: !Ref ContainerCPU
          Essential: 'true'
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrRepoName}:${ImageTag}
          Memory: !Ref ContainerMemory
          LogConfiguration: !If 
            - cloudwatch
            - LogDriver: awslogs
              Options:
                awslogs-group: !Ref 'CloudwatchLogsGroup'
                awslogs-region: !Ref 'AWS::Region'
                awslogs-stream-prefix: !Ref ApplicationName
            - !Ref 'AWS::NoValue'    
          PortMappings:
          - ContainerPort: !Ref ContainerPort
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 
      - ${ApplicationName}-${Env}-ecsec2-taskexerole-${AWS::Region}
      - { Env: !FindInMap [Envmap, !Ref EnvironmentName, type] }
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy     
      Tags: 
        - Key: Name
          Value:  !Sub 
            - ${ApplicationName}-${Env}-${AWS::Region}-ecsservicerole
            - { Env: !FindInMap [Envmap, !Ref EnvironmentName, type] }
        - Key: ApplicationName
          Value: !Sub ${ApplicationName}
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: platform
          Value: mcs
